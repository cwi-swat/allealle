{n1,n2,n3,n4}

Node:1 [{},{<n1>,<n2>,<n3>,<n4>}]
Root:1 [{<n1>},{<n1>}]
edge:2 [{},{<n1,n1>,<n1,n2>,<n1,n3>,<n1,n4>,<n2,n1>,<n2,n2>,<n2,n3>,<n2,n4>,<n3,n1>,<n3,n2>,<n3,n3>,<n3,n4>,<n4,n1>,<n4,n2>,<n4,n3>,<n4,n4>}]

edge in Node -> Node
Root in Node

// All nodes are transitive connected to the Root node
Node in Root.*edge
// A node can only have one incoming edge
forall n:Node | lone edge.n
// A tree is acyclic
// The graph is acyclic
forall n:Node | not (n in n.^edge)

// Nodes can maximal have two outgoing edges
forall n1:Node | exists n2:Node, n3:Node | ((no n1.edge) || (n1.edge = (n2+n3)))
