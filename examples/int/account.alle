{ac1{balance(int)}, ac2{balance(int)}, ac3{balance(int)}, p1{amount(int)},p2{amount(int)},s1, s2, s3, withdraw, deposit}

State: 1          [{<s1>},{<s1>,<s2>,<s3>}]
InitialState: 1   [{<s1>},{<s1>}]
ordering: 2       [{}, {<s1,s2>,<s2,s3>}]
Account:1         [{<ac1>},{<ac1>,<ac2>,<ac3>}]
accountInState:2  [{<s1,ac1>},{<s1,ac1>,<s2,ac2>,<s3,ac3>}]
params:2          [{},{<s2,p1>,<s3,p2>}]

Withdraw:1[{<withdraw>},{<withdraw>}]
Deposit:1[{<deposit>},{<deposit>}]
triggeredEvent:2 [{},{<s2,withdraw>,<s2,deposit>,<s3,withdraw>,<s3,deposit>}]

ordering in State -> State
accountInState in State -> Account 

triggeredEvent in State->(Withdraw++Deposit)

// Entity constraints
forall s:State | (some s.ordering || some ordering.s) && some s.accountInState
forall s:State\InitialState | some params[s]

params[State]::amount > 0 && params[State]::amount < 11

// Initial state
accountInState[InitialState]::balance = 0

// Transition function
forall s1: State, s2:State | s1 -> s2 in ordering => 
  (
    (accountInState[s2]::balance = accountInState[s1]::balance + (params[s2]::amount) && triggeredEvent[s2] == Deposit) ||
    (accountInState[s2]::balance = accountInState[s1]::balance - (params[s2]::amount) && triggeredEvent[s2] == Withdraw)
  )
 
// Goal state 
exists s:State | (accountInState[s])::balance = 20
