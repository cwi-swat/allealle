{ac1, ac2, ac3, am1(int), am2(int), am3(int), s1, s2, s3, event1, event2, wa1(int), wa1(int), da1(int), da2(int)}

State: 1 [{<s1>,<s2>,<s3>},{<s1>,<s2>,<s3>}]
InitialState: 1 [{<s1>},{<s1>}]
ordering: 2[{<s1,s2>}, {<s1,s2>,<s2,s3>}]
Account:1 [{<ac1>,<ac2>,<ac3>},{<ac1>,<ac2>,<ac3>}]
accountInState:2 [{<s1,ac1>,<s2,ac2>,<s3,ac3>},{<s1,ac1>,<s2,ac2>,<s3,ac3>}]
Event:1 [{<event1>,<event2>},{<event1>,<event2>}]
Withdraw:1[{<event1>},{<event1>}]
Deposit:1[{<event2>},{<event2>}]

triggeredEvent:2 [{},{<s2,event1>,<s2,event2>,<s3,event1>,<s3,event2>}]

Amount:1 [{<am1>,<am2>,<am3>}, {<am1>,<am2>,<am3>}]
balance:2 [{<ac1,am1>,<ac2,am2>,<ac3,am3>}, {<ac1,am1>,<ac2,am2>,<ac3,am3>}]

ordering in State -> State
accountInState in State -> Account 
balance in Account -> Amount

Withdraw in Event
Deposit in Event

triggeredEvent in State->Event

// The balance in the first state is 50 euro
balance[accountInState[InitialState]] = 50

forall s1: State, s2:State | s1 -> s2 in ordering => 
  (balance[accountInState[s2]] = balance[accountInState[s1]] + 10 && triggeredEvent[s2] == Deposit) ||
  (balance[accountInState[s2]] = balance[accountInState[s1]] - 10 && triggeredEvent[s2] == Withdraw)
  
exists s:State | some ordering.s && balance[accountInState[s]] > 60
