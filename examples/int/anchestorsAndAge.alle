Person (_:id, age:int) >={<p1,?>} <= {<p1,?>,<p2,?>,<p3,?>,<p4,?>}
Adam (_:id, age:int)   = {<p1,?>}
parent (_:id,_:id)    <= {<p1,p2>,<p1,p3>,<p1,p4>,<p2,p3>,<p2,p4>,<p3,p2>,<p3,p4>,<p4,p2>,<p4,p3>}
anchestor (_:id,_:id) <= {<p2,p1>,<p2,p3>,<p2,p4>,<p3,p1>,<p3,p2>,<p3,p4>,<p4,p1>,<p4,p2>,<p4,p3>}
twin (_:id,_:id)      <= {<p2,p3>,<p3,p2>,<p2,p4>,<p4,p2>,<p3,p4>,<p4,p3>}
 
Adam in Person
parent in Person x Person
anchestor in Person x Person
twin in Person x Person

// Everybody has a parent except Adam
forall p:Person-Adam | one parent.p
 
no parent.Adam

// Nobody is its own parent
forall p:Person | not (p = parent.p) 

// Nobody is the parent of an anchestor
forall p:Person | not (p in (^parent).p)

// Everybody is a decendant of Adam
Person in Adam.(*parent)

// Anchestor is the transposed transitive closure of the parent relation (if you are somebodies parent, grandparent, etc you are an anchestor)
anchestor = ~(^parent) 
//
// Nobody, even Adam, is older then 149

Person::[age > 0 && age < 150]

// Nobody is older than Adam
forall p:Person-Adam | some ((p x [adamAge/age]Adam) where age < adamAge)

// If p is c's parent then p must have been an adult when c was born 
forall p: Person, c: Person-p | p x c in parent => some ([pAge/age]p x [cAge/age]c) where pAge - cAge > 17

// If two persons have the same parent and the same age, they must be twins
forall p1:Person, p2:Person-p1 | (parent.p1 = parent.p2 && some ([p1Age/age]p1 x [p2Age/age]p2) where p1Age = p2Age) <=> p1 x p2 in twin
