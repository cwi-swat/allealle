Num (nId:id, val:int)         <= {<n1,?>..<n5,?>}

Even(nId:id, val:int)         <= {<n1,?>..<n5,?>}
Odd (nId:id, val:int)         <= {<n1,?>..<n5,?>}
twice (single:id, double:id)  <= {<n1,n1>..<n5,n5>}

Even ⊆ Num
Odd ⊆ Num
twice ⊆ Num[nId][single/nId] ⨯ Num[nId][double/nId]

∀ n ∈ Num | some (n where val > 0 && val < 50) 

no Even ∩ Odd

Even ∪ Odd = Num

// All values are distinct
∀ n ∈ Num, n' ∈ Num ∖ n | some (n ⨯ n'[nId'/nId, val'/val]) where val != val'  

// The number is even iff the remainder is 0 after dividing by 2
∀ n ∈ Num | (some n where (val % 2) = 0) ⇔ n ⊆ Even

// Two numbers n and n' are part of the twice relation iff the value of n is the value of n' * 2
∀ n ∈ Num, n' ∈ Num |  
  (some ((n[single/nId] ⨯ n'[double/nId,val2/val]) where val2 = (val * 2))[single,double]) ⇔ 
    n[nId][single/nId] ⨯ n'[nId][double/nId] ⊆ twice 

some (Num[nrOfNumber/count(),totalVal/sum(val)] where nrOfNumber > 0 && totalVal = 10)
