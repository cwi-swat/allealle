File (1 :: size:int) <= {<f0,10>,<f1,?>,<f2,?>}
Dir (1 :: size:int)  <= {<d0,?>,<d1,?>}
Root (1) = {<d0>}
contents (2) >= {<d0,d1>} <= {<d0,d0>,<d0,d1>,<d0,f0>,<d0,f1>,<d0,f2>,<d1,d0>,<d1,d1>,<d1,f0>,<d1,f1>,<d1,f2>}

// BASIC RELATIONAL CONSTRAINTS
// Only dirs can contain other dirs and files
contents in Dir -> (Dir++File)
// A dir cannot contain itself
forall d: Dir | not (d in d.^contents)
// Root is a Dir
Root in Dir
// All files and dirs are (reflexive-transitive) 'content' of the Root dir 
(File++Dir) in Root.*contents
// All files and dirs can only be contained by one dir
forall f:(File++Dir) | lone contents.f

// INTEGER CONSTRAINTS
// All files have a positive size
File::size > 0
// The size of a dir is the sum of all the files that are directly or transitively part of this directory
forall d:Dir | d::size = sum(((d.^contents) & File)::size)