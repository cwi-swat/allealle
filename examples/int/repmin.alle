//abstract class Tree extends Attributable
// case class Pair ( left : Tree , right : Tree ) extends Tree
// case class Leaf ( value : Int ) extends Tree
// repmin ( Pair ( Leaf (3) , Pair ( Leaf (1) , Leaf (10))))
// == Pair ( Leaf (1) , Pair ( Leaf (1) , Leaf (1)))

Node (1 :: globMin:int, locMin:int) = {<p1,?,?>,<p2,?,?>,<l1,?,3>,<l2,?,1>,<l3,?,10>}
Root (1)                            = {<p1>}
Pair (1)                            = {<p1>,<p2>}
Leaf (1)                            = {<l1>,<l2>,<l3>}
tree (2)                            = {<p1,l1>,<p1,p2>,<p2,l2>,<p2,l3>}

forall p:Pair, c1:Node, c2:Node\c1 | c1 in p.tree && c2 in p.tree => 
  (c1::locMin < c2::locMin => p::locMin = c1::locMin) && 
  (c1::locMin >= c2::locMin => p::locMin = c2::locMin)
  
Root::globMin = Root::locMin

forall p:Pair | (p.tree)::globMin = p::globMin
  