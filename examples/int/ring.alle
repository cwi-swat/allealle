{n1(int),n2(int),n3(int)}

Elem:1 [{},{<n1>,<n2>,<n3>}]
Start:1 [{},{<n1>,<n2>,<n3>}]
ring:2 [{},{<n1,n1>,<n1,n2>,<n2,n1>,<n2,n2>,<n1,n3>,<n3,n1>,<n2,n3>,<n3,n2>,<n3,n3>}]

ring in Elem -> Elem
Start in Elem

Elem > 0

// One of the elements in the ring is considered the start element
one Start

// The ring is cyclic, all two combinations of Elem should be in the transitive closure of ring
forall e1: Elem, e2:Elem\e1 | e1->e2 in ^ring

// Every element is part of the ring
forall e: Elem | one ring[e]

// The ring always contains at least two elements
forall e: Elem | not (e->e in ring)

sum(e: Elem | e) = 9

// All elements in the ring have incrementing values starting from the Start ring
forall e1: Elem, e2: Elem\(e1++Start) | e1->e2 in ring => e2 = e1 + 1
