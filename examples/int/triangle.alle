{p1,p2,p3,l1,l2,l3,l4,l5,l6}

Point:1 [{<p1>,<p2>,<p3>},{<p1>,<p2>,<p3>}]
Length:1[{},{<l1>,<l2>,<l3>,<l4>,<l5>,<l6>}]
side:3[{},{<p1,p2,l1>,<p1,p3,l2>,<p2,p3,l3>,<p2,p1,l4>,<p3,p1,l5>,<p3,p2,l6>}]

side in Point -> Point -> Length

forall p: Point | one p.side
forall p1: Point | exists p2: Point | one p1.(side[p2])

forall l: Length | (one side.l || no l)

// Pythagoras
exists l1: Length, l2: Length, l3: Length | (l1 * l1) + (l2 * l2) == (l3 * l3)