{s0,s1,s2,b1_1{balance(int)},b1_2{balance(int)},b1_3{balance(int)},b2_1{balance(int)},b2_2{balance(int)},b2_3{balance(int)},a1{val(int)},a2{val(int)},_r19{val(int)=(b2_2::balance + (-a2::val))},_r13{val(int)=(b1_3::balance + a2::val)},_c100{cons(int)=100},_r10{val(int)=(b2_1::balance + a1::val)},_r23{val(int)=(b2_3::balance + (-a2::val))},_r18{val(int)=(b1_1::balance + a1::val)},_r24{val(int)=(b2_3::balance + (-a1::val))},_c199{cons(int)=199},_r9{val(int)=(b2_1::balance + a2::val)},_c0{cons(int)=0},_r12{val(int)=(b2_3::balance + a1::val)},_r14{val(int)=(b1_3::balance + a1::val)},_r15{val(int)=(b1_2::balance + a2::val)},_r1{val(int)=(b1_3::balance + (-a2::val))},_r2{val(int)=(b1_3::balance + (-a1::val))},_r11{val(int)=(b2_3::balance + a2::val)},_r21{val(int)=(b2_1::balance + (-a2::val))},_r22{val(int)=(b2_1::balance + (-a1::val))},_r20{val(int)=(b2_2::balance + (-a1::val))},_r16{val(int)=(b1_2::balance + a1::val)},_r17{val(int)=(b1_1::balance + a2::val)},_r7{val(int)=(b2_2::balance + a2::val)},_r8{val(int)=(b2_2::balance + a1::val)},_r5{val(int)=(b1_1::balance + (-a2::val))},_r6{val(int)=(b1_1::balance + (-a1::val))},_r3{val(int)=(b1_2::balance + (-a2::val))},_r4{val(int)=(b1_2::balance + (-a1::val))}}

State:1 [{<s0>}, {<s0>,<s1>,<s2>}]
InitialState:1 [{<s0>}, {<s0>}]
ordering:2 [{}, {<s0,s1>,<s1,s2>}]
account1:2 [{}, {<s0,b1_1>,<s1,b1_2>,<s2,b1_3>}]
account2:2 [{}, {<s0,b2_1>,<s1,b2_2>,<s2,b2_3>}]
amount:2 [{}, {<s1,a1>,<s2,a2>}]
_C100:1 [{<_c100>,<_c100>}, {<_c100>,<_c100>}]
_C0:1 [{<_c0>}, {<_c0>}]
_min_1:3 [{<b1_2,a2,_r3>,<b1_2,a1,_r4>,<b1_1,a1,_r6>,<b1_1,a2,_r5>,<b1_3,a1,_r2>,<b1_3,a2,_r1>}, {<b1_2,a2,_r3>,<b1_2,a1,_r4>,<b1_1,a1,_r6>,<b1_1,a2,_r5>,<b1_3,a1,_r2>,<b1_3,a2,_r1>}]
_plus_2:3 [{<b2_3,a1,_r12>,<b2_3,a2,_r11>,<b2_1,a2,_r9>,<b2_2,a1,_r8>,<b2_2,a2,_r7>,<b2_1,a1,_r10>}, {<b2_3,a1,_r12>,<b2_3,a2,_r11>,<b2_1,a2,_r9>,<b2_2,a1,_r8>,<b2_2,a2,_r7>,<b2_1,a1,_r10>}]
_plus_3:3 [{<b1_2,a1,_r16>,<b1_2,a2,_r15>,<b1_1,a2,_r17>,<b1_1,a1,_r18>,<b1_3,a2,_r13>,<b1_3,a1,_r14>}, {<b1_2,a1,_r16>,<b1_2,a2,_r15>,<b1_1,a2,_r17>,<b1_1,a1,_r18>,<b1_3,a2,_r13>,<b1_3,a1,_r14>}]
_min_4:3 [{<b2_3,a2,_r23>,<b2_3,a1,_r24>,<b2_1,a1,_r22>,<b2_1,a2,_r21>,<b2_2,a1,_r20>,<b2_2,a2,_r19>}, {<b2_3,a2,_r23>,<b2_3,a1,_r24>,<b2_1,a1,_r22>,<b2_1,a2,_r21>,<b2_2,a1,_r20>,<b2_2,a2,_r19>}]
_C199:1 [{<_c199>}, {<_c199>}]


(ordering in (State->State))
(InitialState in State)
(forall s:(State\InitialState) | (some (ordering.s)))
(forall s:State | ((some (s.account1)) && (some (s.account2))))
(forall s:(State\InitialState) | (some (s.amount)))
(forall s:(State\InitialState) | ((no (ordering.s)) => ((no (s.account1)) && (no (s.account2)))))
((InitialState.account1)::balance = _C100::cons)
((InitialState.account2)::balance = _C100::cons)
(forall s1:State, s2:State | (((s1->s2) in ordering) => (((s2.amount)::val > _C0::cons) && (((((s1.account1)::balance > (s2.amount)::val) && ((s2.account1)::balance = ((s2.amount)::val.((s1.account1)::balance._min_1))::val)) && ((s2.account2)::balance = ((s2.amount)::val.((s2.account2)::balance._plus_2))::val)) || ((((s1.account2)::balance > (s2.amount)::val) && ((s2.account1)::balance = ((s2.amount)::val.((s1.account1)::balance._plus_3))::val)) && ((s2.account2)::balance = ((s2.amount)::val.((s1.account2)::balance._min_4))::val))))))
(exists s:State | ((s.account1)::balance = _C199::cons))

