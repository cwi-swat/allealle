{p1{age(int)},p2{age(int)},p3{age(int)},p4{age(int)},_c150{cons(int)=150},_r9{val(int)=(p1 + (-p2))},_r1{val(int)=(p1 + (-p3))},_r2{val(int)=(p3 + (-p4))},_r16{val(int)=(p3 + (-p1))},_r12{val(int)=(p3 + (-p3))},_r13{val(int)=(p1 + (-p4))},_r14{val(int)=(p2 + (-p2))},_r15{val(int)=(p2 + (-p3))},_r10{val(int)=(p2 + (-p4))},_r11{val(int)=(p2 + (-p1))},_c0{cons(int)=0},_c17{cons(int)=17},_r7{val(int)=(p4 + (-p3))},_r8{val(int)=(p4 + (-p4))},_r3{val(int)=(p1 + (-p1))},_r4{val(int)=(p3 + (-p2))},_r5{val(int)=(p4 + (-p1))},_r6{val(int)=(p4 + (-p2))}}

Person:1 [{<p1>}, {<p1>,<p2>,<p3>,<p4>}]
Adam:1 [{<p1>}, {<p1>}]
parent:2 [{}, {<p1,p2>,<p1,p3>,<p1,p4>,<p2,p1>,<p2,p3>,<p2,p4>,<p3,p1>,<p3,p2>,<p3,p4>,<p4,p1>,<p4,p2>,<p4,p3>}]
anchestor:2 [{}, {<p1,p2>,<p1,p3>,<p1,p4>,<p2,p1>,<p2,p3>,<p2,p4>,<p3,p1>,<p3,p2>,<p3,p4>,<p4,p1>,<p4,p2>,<p4,p3>}]
twin:2 [{}, {<p2,p3>,<p3,p2>,<p2,p4>,<p4,p2>,<p3,p4>,<p4,p3>}]
_C0:1 [{<_c0>}, {<_c0>}]
_C150:1 [{<_c150>}, {<_c150>}]
_R_1:1 [{<_r6>,<_r5>,<_r4>,<_r3>,<_r9>,<_r8>,<_r7>,<_r11>,<_r10>,<_r15>,<_r14>,<_r13>,<_r12>,<_r16>,<_r2>,<_r1>}, {<_r6>,<_r5>,<_r4>,<_r3>,<_r9>,<_r8>,<_r7>,<_r11>,<_r10>,<_r15>,<_r14>,<_r13>,<_r12>,<_r16>,<_r2>,<_r1>}]
_min_1:3 [{<p1,p3,_r1>,<p3,p4,_r2>,<p1,p1,_r3>,<p3,p2,_r4>,<p4,p1,_r5>,<p4,p2,_r6>,<p4,p3,_r7>,<p4,p4,_r8>,<p1,p2,_r9>,<p2,p4,_r10>,<p2,p1,_r11>,<p3,p3,_r12>,<p1,p4,_r13>,<p2,p2,_r14>,<p2,p3,_r15>,<p3,p1,_r16>}, {<p1,p3,_r1>,<p3,p4,_r2>,<p1,p1,_r3>,<p3,p2,_r4>,<p4,p1,_r5>,<p4,p2,_r6>,<p4,p3,_r7>,<p4,p4,_r8>,<p1,p2,_r9>,<p2,p4,_r10>,<p2,p1,_r11>,<p3,p3,_r12>,<p1,p4,_r13>,<p2,p2,_r14>,<p2,p3,_r15>,<p3,p1,_r16>}]
_C17:1 [{<_c17>}, {<_c17>}]


(Adam in Person)
(parent in (Person->Person))
(anchestor in (Person->Person))
(twin in (Person->Person))
(forall p:Person | ((not (p == Adam)) => (one (parent.p))))
(no (parent.Adam))
(forall p:Person | (not (p == (parent.p))))
(forall p:Person | (not (p in ((^parent).p))))
(Person in (Adam.(*parent)))
(anchestor == (~(^parent)))
((Person::age >= _C0::cons) && (Person::age < _C150::cons))
(forall p:(Person\Adam) | (p::age < Adam::age))
(forall p:Person, c:(Person\p) | (((p->c) in parent) => ((c::age.(p::age._min_1))::val > _C17::cons)))
(twin == {p1:Person, p2:(Person\p1) | (((parent.p1) == (parent.p2)) && (p1::age = p2::age))})

