
Vehicle (1 :: length:int)             = {<orange_car,2>,<red_car,2>,<yellow_car,2>,<purple_car,2>,<pink_truck,3>,<blue_truck,3>,<brown_car,2>,<pink_car,2>,<light_green_car,2>,<blue_car,2>,<dark_green_car,2>,<yellow_truck,3>,<black_car,2>}
RedCar (1)                            = {<red_car>}
Horizontal (1)                        = {<red_car>,<yellow_car>,<blue_truck>,<brown_car>,<light_green_car>,<black_car>}
Vertical (1)                          = {<orange_car>,<purple_car>,<pink_truck>,<pink_car>,<blue_car>,<dark_green_car>,<yellow_truck>}

State (1)                             >={<s1>} <= {<s1>,<s2>,<s3>,<s4>,<s5>,<s6>,<s7>,<s8>,<s9>,<s10>,<s11>}
InitialState (1)                      = {<s1>}
ordening (2)                         <= {<s1,s2>,<s2,s3>,<s3,s4>,<s4,s5>,<s5,s6>,<s6,s7>,<s7,s8>,<s8,s9>,<s9,s10>,<s10,s11>}

posInState (2 :: row:int, col:int)   >= {<s1,orange_car,0,4>,<s1,red_car,2,3>,<s1,yellow_car,5,3>,<s1,purple_car,3,3>,<s1,pink_truck,1,5>,<s1,blue_truck,3,0>,<s1,brown_car,5,0>,<s1,pink_car,1,2>,<s1,light_green_car,0,1>,<s1,blue_car,1,1>,<s1,dark_green_car,4,2>,<s1,yellow_truck,0,0>,<s1,black_car,4,4>} <= {<s1,orange_car,0,4>,<s2,orange_car,?,4>,<s3,orange_car,?,4>,<s4,orange_car,?,4>,<s5,orange_car,?,4>,<s6,orange_car,?,4>,<s7,orange_car,?,4>,<s8,orange_car,?,4>,<s9,orange_car,?,4>,<s10,orange_car,?,4>,<s11,orange_car,?,4>,<s1,red_car,2,3>,<s2,red_car,2,?>,<s3,red_car,2,?>,<s4,red_car,2,?>,<s5,red_car,2,?>,<s6,red_car,2,?>,<s7,red_car,2,?>,<s8,red_car,2,?>,<s9,red_car,2,?>,<s10,red_car,2,?>,<s11,red_car,2,?>,<s1,yellow_car,5,3>,<s2,yellow_car,5,?>,<s3,yellow_car,5,?>,<s4,yellow_car,5,?>,<s5,yellow_car,5,?>,<s6,yellow_car,5,?>,<s7,yellow_car,5,?>,<s8,yellow_car,5,?>,<s9,yellow_car,5,?>,<s10,yellow_car,5,?>,<s11,yellow_car,5,?>,<s1,purple_car,3,3>,<s2,purple_car,?,3>,<s3,purple_car,?,3>,<s4,purple_car,?,3>,<s5,purple_car,?,3>,<s6,purple_car,?,3>,<s7,purple_car,?,3>,<s8,purple_car,?,3>,<s9,purple_car,?,3>,<s10,purple_car,?,3>,<s11,purple_car,?,3>,<s1,pink_truck,1,5>,<s2,pink_truck,?,5>,<s3,pink_truck,?,5>,<s4,pink_truck,?,5>,<s5,pink_truck,?,5>,<s6,pink_truck,?,5>,<s7,pink_truck,?,5>,<s8,pink_truck,?,5>,<s9,pink_truck,?,5>,<s10,pink_truck,?,5>,<s11,pink_truck,?,5>,<s1,blue_truck,3,0>,<s2,blue_truck,3,?>,<s3,blue_truck,3,?>,<s4,blue_truck,3,?>,<s5,blue_truck,3,?>,<s6,blue_truck,3,?>,<s7,blue_truck,3,?>,<s8,blue_truck,3,?>,<s9,blue_truck,3,?>,<s10,blue_truck,3,?>,<s11,blue_truck,3,?>,<s1,brown_car,5,0>,<s2,brown_car,5,?>,<s3,brown_car,5,?>,<s4,brown_car,5,?>,<s5,brown_car,5,?>,<s6,brown_car,5,?>,<s7,brown_car,5,?>,<s8,brown_car,5,?>,<s9,brown_car,5,?>,<s10,brown_car,5,?>,<s11,brown_car,5,?>,<s1,pink_car,1,2>,<s2,pink_car,?,2>,<s3,pink_car,?,2>,<s4,pink_car,?,2>,<s5,pink_car,?,2>,<s6,pink_car,?,2>,<s7,pink_car,?,2>,<s8,pink_car,?,2>,<s9,pink_car,?,2>,<s10,pink_car,?,2>,<s11,pink_car,?,2>,<s1,light_green_car,0,1>,<s2,light_green_car,0,?>,<s3,light_green_car,0,?>,<s4,light_green_car,0,?>,<s5,light_green_car,0,?>,<s6,light_green_car,0,?>,<s7,light_green_car,0,?>,<s8,light_green_car,0,?>,<s9,light_green_car,0,?>,<s10,light_green_car,0,?>,<s11,light_green_car,0,?>,<s1,blue_car,1,1>,<s2,blue_car,?,1>,<s3,blue_car,?,1>,<s4,blue_car,?,1>,<s5,blue_car,?,1>,<s6,blue_car,?,1>,<s7,blue_car,?,1>,<s8,blue_car,?,1>,<s9,blue_car,?,1>,<s10,blue_car,?,1>,<s11,blue_car,?,1>,<s1,dark_green_car,4,2>,<s2,dark_green_car,?,2>,<s3,dark_green_car,?,2>,<s4,dark_green_car,?,2>,<s5,dark_green_car,?,2>,<s6,dark_green_car,?,2>,<s7,dark_green_car,?,2>,<s8,dark_green_car,?,2>,<s9,dark_green_car,?,2>,<s10,dark_green_car,?,2>,<s11,dark_green_car,?,2>,<s1,yellow_truck,0,0>,<s2,yellow_truck,?,0>,<s3,yellow_truck,?,0>,<s4,yellow_truck,?,0>,<s5,yellow_truck,?,0>,<s6,yellow_truck,?,0>,<s7,yellow_truck,?,0>,<s8,yellow_truck,?,0>,<s9,yellow_truck,?,0>,<s10,yellow_truck,?,0>,<s11,yellow_truck,?,0>,<s1,black_car,4,4>,<s2,black_car,4,?>,<s3,black_car,4,?>,<s4,black_car,4,?>,<s5,black_car,4,?>,<s6,black_car,4,?>,<s7,black_car,4,?>,<s8,black_car,4,?>,<s9,black_car,4,?>,<s10,black_car,4,?>,<s11,black_car,4,?>}

ordening in State->State
posInState in State->Vehicle

// all states should be reachable from the initial state
forall s:State | s in InitialState.*ordening

// All vehicles have a position in every state
State->Vehicle in posInState

forall v:Horizontal | let p:State->v | p::col >= 0 && p::col <= (6 - v::length)
forall v:Vertical   | let p:State->v | p::row >= 0 && p::row <= (6 - v::length)

// goal is to get the red car out
exists s:State |  (s->RedCar)::col = 4

// two horizontal cars on the same row should never overlap
forall s:State, v1:Horizontal, v2:Horizontal\v1 | let p1:s->v1, p2:s->v2 | 
  p1::row = p2::row =>  
    (p1::col <= p2::col => (p2::col - p1::col >= v1::length)) &&
    (p1::col >  p2::col => (p1::col - p2::col >= v2::length))
  
// two vertical cars in the same column should never overlap
forall s:State, v1:Vertical, v2:Vertical\v1 | let p1:s->v1, p2:s->v2 | 
  p1::col = p2::col =>  
    (p1::row <= p2::row => (p2::row - p1::row >= v1::length)) &&
    (p1::row >  p2::row => (p1::row - p2::row >= v2::length))
    
// two cars with orthogonal directions should never overlap
forall s:State, v1:Horizontal, v2:Vertical | let p1:s->v1, p2:s->v2 | 
  (p1::col <= p2::col && ((p2::col - p1::col) < v1::length) => (p1::row < p2::row || (p1::row - p2::row) >= v2::length)) 

// two horizontal cars on the same row can not bunny hop over eachother
forall s1:State, s2:State, v1:Horizontal, v2:Horizontal\v1 | s1->s2 in ordening => (let p1Old:s1->v1, p1New:s2->v1, p2Old:s1->v2, p2New:s2->v2 |
  p1Old::row = p2Old::row => ((p1Old::col < p2Old::col => p1New::col < p2New::col) && 
                               (p1Old::col > p2Old::col => p1New::col > p2New::col)))

// two vertical cars on the same column can not bunny hop over eachother
forall s1:State, s2:State, v1:Vertical, v2:Vertical\v1 | s1->s2 in ordening => (let p1Old:s1->v1, p1New:s2->v1, p2Old:s1->v2, p2New:s2->v2 |
  p1Old::col = p2Old::col => ((p1Old::row < p2Old::row => p1New::row < p2New::row) &&
                               (p1Old::row > p2Old::row => p1New::row > p2New::row)))

// two orthogonal vehicles can not bunny hop over eachother
forall s1:State, s2:State, v1:Horizontal, v2:Vertical | s1->s2 in ordening => (let p1Old:s1->v1, p1New:s2->v1, p2Old:s1->v2, p2New:s2->v2 |
  // horziontal v1 hops over vertical v2
  ((p1Old::col < p2Old::col && p1New::col > p2New::col && p1Old::row >= p2Old::row && p1Old::row < (p2Old::row + v2::length)) => (p2New::row > p1New::row || (p2New::row + v2::length) <= p1New::row )) &&
  ((p1Old::col > p2Old::col && p1New::col < p2New::col && p1Old::row >= p2Old::row && p1Old::row < (p2Old::row + v2::length)) => (p2New::row > p1New::row || (p2New::row + v2::length) <= p1New::row )) &&
  // vertical v2 hops over horizontal v1
  ((p2Old::row < p1Old::row && p2New::row > p1New::row && p2Old::col >= p1Old::col && p2Old::col < (p1Old::col + v1::length)) => (p1New::col > p2New::col || (p1New::col + v1::length) <= p2New::col)) &&
  ((p2Old::row > p1Old::row && p2New::row < p1New::row && p2Old::col >= p1Old::col && p2Old::col < (p1Old::col + v1::length)) => (p1New::col > p2New::col || (p1New::col + v1::length) <= p2New::col)) )
 
minimize #State
         