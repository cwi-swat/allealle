// Example comes from http://www.ams.org/publicoutreach/feature-column/fcarc-tsp
City (cId:id)                       = {<a>,<b>,<c>,<home>}
StartingPoint (cId:id)              = {<home>}
route (from:id, to:id, length:int) <= {<home,a,80>,<a,home,80>,<home,b,69>,<b,home,69>,<home,c,50>,<c,home,50>,<a,b,140>,<b,a,140>,<a,c,100>,<c,a,100>,<b,c,90>,<c,b,90>}
TotalLength (tId:id, length:int)    = {<total,?>}

// The salesman only vists a city once
∀ c ∈ City | one (c[cId as from] ⨝ route) ∧ one (c[cId as to] ⨝ route)

// The salesman must visit each city
City ⊆ (StartingPoint[cId as from] ⨝ *<from,to>(route[from,to]))[to][to as cId]

// Convenient condition to capture the shorted route length
some (TotalLength ⨯ route[sum(length) as totalLength]) where length = totalLength

// We want the route with the shortest overall length
objectives: minimize TotalLength[length]