Node(1) >= {<n1>} <= {<n1>..<n6>}
Root(1) =  {<n1>}
edge(2) <= {<n1,n1>..<n6,n6>}

edge in Node -> Node
Root in Node

// All nodes are transitive connected to the Root node
Node in Root.*edge

// A nodes in a tree, except the root, can only have one incoming edge
forall n:Node\Root | one edge.n

// The root node does not have any incoming edges
no edge.Root

// A tree is acyclic
forall n:Node | not (n in n.^edge)

// Nodes can maximal have two outgoing edges
forall n:Node | #n.edge <= 2

