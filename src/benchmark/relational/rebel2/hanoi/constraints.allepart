// Constraints for the configuration and ordering relations
order ⊆ Config[config as cur] ⨯ Config[config as nxt]
last = Config ∖ order[cur->config]  // There is only one last configuration
 

// Generic 'Type' constraints    
raisedEvent ⊆ (order) ⨯ allowedTransitions[event] ⨯ Instance[instance]
instanceInState ⊆ Instance[instance] ⨯ Config ⨯ State
changedInstance ⊆ (order) ⨯ Instance[instance]
    
// Machine specific `type` constraints
// For `Peg`
PegDiscs  ⊆ Config ⨯ (Instance ⨝ Peg)[instance] ⨯ (Instance ⨝ Disc)[instance->discs]
// For `Tower`
TowerGoal  ⊆ Config ⨯ (Instance ⨝ Tower)[instance] ⨯ (Instance ⨝ Peg)[instance->goal]
TowerInitial  ⊆ Config ⨯ (Instance ⨝ Tower)[instance] ⨯ (Instance ⨝ Peg)[instance->initial]
// For `Disc`
DiscSize[config,instance]  ⊆ Config ⨯ (Instance ⨝ Disc)[instance]

// Specific per event: parameter type and multiplicity constraints
// Type constraints for events of Peg
ParamEventPegRemoveD ⊆ (order ∪ loop) ⨯ (Instance ⨝ Disc)[instance->d]
ParamEventPegAddD ⊆ (order ∪ loop) ⨯ (Instance ⨝ Disc)[instance->d]
// Type constraints for events of Tower
ParamEventTowerMoveD ⊆ (order ∪ loop) ⨯ (Instance ⨝ Disc)[instance->d]
ParamEventTowerMoveTo ⊆ (order ∪ loop) ⨯ (Instance ⨝ Peg)[instance->to]
ParamEventTowerMoveFrom ⊆ (order ∪ loop) ⨯ (Instance ⨝ Peg)[instance->from]

// Multiplicity constraints for event parameters
∀ step ∈ (order ∪ loop) ⨝ raisedEvent | (
  (some (step ⨝ EventPegRemove) ⇔ one (step ⨝ ParamEventPegRemoveD)) ∧
  (some (step ⨝ EventTowerMove) ⇔ one (step ⨝ ParamEventTowerMoveD)) ∧
  (some (step ⨝ EventTowerMove) ⇔ one (step ⨝ ParamEventTowerMoveFrom)) ∧
  (some (step ⨝ EventTowerMove) ⇔ one (step ⨝ ParamEventTowerMoveTo)) ∧
  (some (step ⨝ EventPegAdd) ⇔ one (step ⨝ ParamEventPegAddD))
)
// Generic: All configurations are reachable
∀ c ∈ Config ∖ first | c ⊆ (first[config as cur] ⨝ ^order)[nxt -> config]

// Generic: Every transition can only happen by exactly one event
∀ o ∈ order | one o ⨝ raisedEvent

// Specif: In every configuration all machines have a state IFF its a machine which is not empty
∀ c ∈ Config, inst ∈ (Instance ∖ ((Disc) ⨝ Instance)) | one instanceInState ⨝ c ⨝ inst

// Specific per machine: In every configuration iff a machine is in an initialized state then it must have values
// for Peg
∀ c ∈ Config, inst ∈ (Instance ⨝ Peg)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no PegDiscs ⨝ c ⨝ inst)
// for Tower
∀ c ∈ Config, inst ∈ (Instance ⨝ Tower)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no TowerInitial ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Tower)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇒ one TowerInitial ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Tower)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no TowerGoal ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Tower)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇒ one TowerGoal ⨝ c ⨝ inst)
// for Disc
∀ c ∈ Config, inst ∈ (Instance ⨝ Disc)[instance] | one DiscSize ⨝ c ⨝ inst

// Generic: Transitions are only allowed between if an event is specified between two states
∀ o ∈ (order) ⨝ raisedEvent | (o[cur as config] ⨝ instanceInState)[state->from] ⨯ (o[nxt as config] ⨝ instanceInState)[state->to] ⨯ o[event] ⊆ allowedTransitions

// Change set predicates
pred inChangeSet[step: (cur:id, nxt:id), instances: (instance:id)]
  = instances ⊆ (changedInstance ⨝ step)[instance]
 
pred notInChangeSet[step: (cur:id, nxt:id), instances: (instance:id)]
  = no instances ∩ (changedInstance ⨝ step)[instance]

pred changeSetCanContain[step: (cur:id, nxt:id), instances: (instance:id)]
  = (changedInstance ⨝ step)[instance] ⊆ instances 

// Generic predicates
pred forceState[curState: (state:id), nxtState: (state:id), raisedEvent: (event:id)]
  = nxtState = (curState[state as from] ⨝ (allowedTransitions ⨝ raisedEvent))[to->state]

pred inState[config: (config:id), instance: (instance:id), state: (state:id)]
  = ((instance ⨯ config) ⨝ instanceInState)[state] ⊆ state

// Event predicates for Peg
pred eventPegAdd[step:(cur:id, nxt:id), peg: (instance:id), d: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ peg)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ peg)[state] |
    ( 
      // Preconditions 
      no ((peg ⨝ (PegDiscs ⨝ cur))[discs] ∩ d[instance->discs]) ∧
      (∀ other ∈ (peg ⨝ (PegDiscs ⨝ cur))[discs] | (some ((d ⨝ (DiscSize ⨝ cur))[size][size as param_2_size] ⨯ (other[discs as instance] ⨝ (DiscSize ⨝ cur))[size][size as other_size_1]) where (other_size_1 > param_2_size)))  ∧ 
      // Postconditions
      (peg ⨝ (PegDiscs ⨝ nxt))[discs] = ((peg ⨝ (PegDiscs ⨝ cur))[discs] ∪ d[instance as discs])  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventPegAdd] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, peg]
    )

pred eventPegRemove[step:(cur:id, nxt:id), peg: (instance:id), d: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ peg)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ peg)[state] |
    ( 
      // Preconditions 
      (d[instance->discs] ⊆ (peg ⨝ (PegDiscs ⨝ cur))[discs]) ∧
      (∀ other ∈ ((peg ⨝ (PegDiscs ⨝ cur))[discs] ∖ d[instance as discs]) | (some ((d ⨝ (DiscSize ⨝ cur))[size][size as param_2_size] ⨯ (other[discs as instance] ⨝ (DiscSize ⨝ cur))[size][size as other_size_1]) where (other_size_1 > param_2_size)))  ∧ 
      // Postconditions
      (peg ⨝ (PegDiscs ⨝ nxt))[discs] = ((peg ⨝ (PegDiscs ⨝ cur))[discs] ∖ d[instance as discs])  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventPegRemove] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, peg]
    )

pred framePeg[step: (cur:id, nxt:id), peg: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ peg)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ peg)[state] | (
    nxtState = curState ∧
    (
      curState ⊆ uninitialized ∨ 
      (// Postconditions
       (peg ⨝ (PegDiscs ⨝ nxt))[discs] = (peg ⨝ (PegDiscs ⨝ cur))[discs])
    )
  )

// Event predicates for Tower
pred eventTowerMove[step:(cur:id, nxt:id), tower: (instance:id), d: (instance:id), from: (instance:id), to: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ tower)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ tower)[state] |
    ( 
      // Preconditions 
      eventPegRemove[step, from, d] ∧
      eventPegAdd[step, to, d]  ∧ 
      // Postconditions
      (tower ⨝ (TowerGoal ⨝ nxt))[goal] = (tower ⨝ (TowerGoal ⨝ cur))[goal] ∧
      (tower ⨝ (TowerInitial ⨝ nxt))[initial] = (tower ⨝ (TowerInitial ⨝ cur))[initial]  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventTowerMove] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, tower]
    )

pred frameTower[step: (cur:id, nxt:id), tower: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ tower)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ tower)[state] | (
    nxtState = curState ∧
    (
      curState ⊆ uninitialized ∨ 
      (// Postconditions
       (tower ⨝ (TowerInitial ⨝ nxt))[initial] = (tower ⨝ (TowerInitial ⨝ cur))[initial] ∧
       (tower ⨝ (TowerGoal ⨝ nxt))[goal] = (tower ⨝ (TowerGoal ⨝ cur))[goal])
    )
  )

// Event predicates for Disc
pred frameDisc[step: (cur:id, nxt:id), disc: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ disc)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ disc)[state] | (
    nxtState = curState ∧
    (
      curState ⊆ uninitialized ∨ 
      (// Postconditions
       (some ((disc ⨝ (DiscSize ⨝ cur))[size][size as cur_size] ⨯ (disc ⨝ (DiscSize ⨝ nxt))[size][size as nxt_size]) where (nxt_size = cur_size)))
    )
  )


// Transition function for Peg
pred possibleTransitionsPeg[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ Peg)[instance] |
    
    (notInChangeSet[step, inst] ⇒ framePeg[step, inst])
// Transition function for Tower
pred possibleTransitionsTower[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ Tower)[instance] |
    (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ (
      (eventTowerMove[step,inst,(step ⨝ ParamEventTowerMoveD)[d->instance],(step ⨝ ParamEventTowerMoveFrom)[from->instance],(step ⨝ ParamEventTowerMoveTo)[to->instance]] ∧
      (step ⨝ raisedEvent)[event] = EventTowerMove ∧
      let cur = step[cur->config], to = (ParamEventTowerMoveTo ⨝ step)[to -> instance], from = (ParamEventTowerMoveFrom ⨝ step)[from -> instance] | changeSetCanContain[step, inst ∪ from ∪ to])
    ))
    ∧
    (notInChangeSet[step, inst] ⇒ frameTower[step, inst])

// Transition function
∀ step ∈ order| possibleTransitionsPeg[step] ∧ possibleTransitionsTower[step]

// Facts from spec `Peg`
// Fact `ADiscCanOnlyBeOnOneRod` 
let cur = first | (∀ cur ∈ (cur[config as cur] ⨝ *(order ∪ loop))[nxt->config] | let step = cur[config as cur] ⨝ (order ∪ loop), nxt = step[nxt->config] | (∀ d ∈ (Instance ⨝ Disc)[instance] | (∃ p ∈ (Instance ⨝ Peg)[instance] | ((d[instance->discs] ⊆ (p ⨝ (PegDiscs ⨝ cur))[discs]) ∧ (∀ other ∈ (Instance ⨝ Peg)[instance] | ((other ≠ p ⇒ no ((other ⨝ (PegDiscs ⨝ cur))[discs] ∩ d[instance->discs]))))))))
// Facts from spec `Tower`
// Fact `InitiallyAllDiscOnInitialPeg` 
let cur = first | (∀ d ∈ (Instance ⨝ Disc)[instance],t ∈ (Instance ⨝ Tower)[instance] | (d[instance->discs] ⊆ ((t ⨝ (TowerInitial ⨝ cur))[initial][initial as instance] ⨝ (PegDiscs ⨝ cur))[discs]))
// Facts from spec `Disc`
// Fact `DistinctSizes` 
let cur = first | (∀ cur ∈ (cur[config as cur] ⨝ *(order ∪ loop))[nxt->config] | let step = cur[config as cur] ⨝ (order ∪ loop), nxt = step[nxt->config] | (∀ d1 ∈ (Instance ⨝ Disc)[instance],d2 ∈ (Instance ⨝ Disc)[instance] | (((some ((d2 ⨝ (DiscSize ⨝ cur))[size][size as d2_size_2] ⨯ (d1 ⨝ (DiscSize ⨝ cur))[size][size as d1_size_1]) where (d1_size_1 = d2_size_2)) ⇒ d1 = d2))))
// Fact `DiscsAreImmutable` 
let cur = first | (∀ cur ∈ (cur[config as cur] ⨝ *(order ∪ loop))[nxt->config] ∖ last | let step = cur[config as cur] ⨝ (order ∪ loop), nxt = step[nxt->config] | (∀ d ∈ (Instance ⨝ Disc)[instance] | (some ((d ⨝ (DiscSize ⨝ nxt))[size][size as d_size_3] ⨯ (d ⨝ (DiscSize ⨝ cur))[size][size as d_size_4]) where (d_size_3 = d_size_4))))

// Assert `AllOnGoalPeg`
let cur = first | (∃ cur ∈ (cur[config as cur] ⨝ *(order ∪ loop))[nxt->config] | let step = cur[config as cur] ⨝ (order ∪ loop), nxt = step[nxt->config] | (∃ t ∈ (Instance ⨝ Tower)[instance] | (∀ d ∈ (Instance ⨝ Disc)[instance] | (d[instance->discs] ⊆ ((t ⨝ (TowerGoal ⨝ cur))[goal][goal as instance] ⨝ (PegDiscs ⨝ cur))[discs]))))

// Minimize the number of steps by minimizing the number of Configurations
objectives: minimize Config[count()]